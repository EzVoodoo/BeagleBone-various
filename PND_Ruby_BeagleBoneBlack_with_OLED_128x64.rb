#################################################
####### GPIO
#################################################
# This class implements methods to use GPIO pins of BeagleBone Black as input or outputs
# See it in use on pierrend.com

PATH_GPIO = "/sys/class/gpio"

class GPIO_BeagleBone

	attr_reader :pin_gpio

	# Initialize a pin
	# pin is string like "P8_7"
	# direction is string "in" or "out"
	def initialize(pin,direction)
		@pin_gpio = pin_to_pin_gpio(pin)
		export # Export the pin
		@value = 0 # Pin is low by default
		@value_file_path = File.join(PATH_GPIO, "gpio#{@pin_gpio}", "value")
		if (direction == 'in' || direction == 'out') 
			set_direction(direction)
		else
			raise ArgumentError, 'Direction should be in or out'
		end
		set_value
	end

	def pin_to_pin_gpio(pin)
		# Only the 33 pins which defaults to GPIO
		case pin
		when 'P8_7'
			return 66
		when 'P8_8'
			return 67		
		when 'P8_9'
			return 69		
		when 'P8_10'
			return 68		
		when 'P8_11'
			return 45		
		when 'P8_12'
			return 44		
		when 'P8_13'
			return 23		
		when 'P8_14'
			return 26		
		when 'P8_15'
			return 47		
		when 'P8_16'
			return 46		
		when 'P8_17'
			return 27		
		when 'P8_18'
			return 65		
		when 'P8_19'
			return 22
		when 'P8_26'
			return 61
		when 'P9_11'
			return 30
		when 'P9_12'
			return 60
		when 'P9_13'
			return 31
		when 'P9_14'
			return 40
		when 'P9_15'
			return 48
		when 'P9_16'
			return 51
		when 'P9_17'
			return 4
		when 'P9_18'
			return 5
		when 'P9_21'
			return 3
		when 'P9_22'
			return 2
		when 'P9_23'
			return 49
		when 'P9_24'
			return 15
		when 'P9_25'
			return 117
		when 'P9_26'
			return 14
		when 'P9_27'
			return 125
		when 'P9_30'
			return 122
		when 'P9_24'
			return 15
		when 'P9_41'
			return 20
		when 'P9_42'
			return 7
		else
			raise ArgumentError, 'Pin not available, example: P8_15'
		end
	end

	def export
		# Export the pin to userspace
		File.open(File.join(PATH_GPIO, 'export'), 'w') { |file| file << @pin_gpio }
	end

	def set_direction(direction)
		# Set direction of the pin
		File.open(File.join(PATH_GPIO, "gpio#{@pin_gpio}", "direction"), 'w') { |file| file << direction }
	end

	def set_value(val = @value)
		# Set state of the pin
		if (val == 0 || val == 1)
			if (@value != val)
				# There are many ways to do that in Ruby. In my tests this is the fastest way
				File.open(@value_file_path, 'w') { |file| file << val }
				@value = val
			end
		else
			raise ArgumentError, 'Value should be 0 or 1'
		end
	end

end

#################################################
####### OLED
#################################################
# This class implements methods to use an OLED screen
# OLED is Monochrome 0.96" 128x64 OLED graphic display bought at Adafruit

class OLED_128x64_Adafruit

	attr_accessor :display_priority, :progress_bar_second_line

	# Connects with SPI protocol
	# Arguments are BeagleBone pins
	def initialize(oled_data, oled_clk, oled_dc, oled_cs, oled_rst)
		@oled_data = oled_data
		@oled_clk = oled_clk
		@oled_dc = oled_dc
		@oled_cs = oled_cs
		@oled_rst = oled_rst
		@oled_buffer = buffer_precomputed('nfs')
		oled_init
		@logger = ["LOGGER INIT"]
		@last_display_time = 0
		@display_priority = true # Change to true when display refresh is more important than other code
		@progress_bar_first_line = ""
		@progress_bar_second_line = ""
	end

	def oled_init
	  # Reset
	  @oled_rst.set_value(1)
	  sleep(0.1)
	  @oled_rst.set_value(0)
		sleep(0.1)
	  @oled_rst.set_value(1)
	  sleep(0.1)
	  # Init commands
	  send_command_to_oled(0xAE) # Display off
	  send_command_to_oled(0xD5) # Set display clock div
	  send_command_to_oled(0x80) #   value: the suggested ratio 0x80
	  send_command_to_oled(0xA8) # Set multiplex
	  send_command_to_oled(0x3F) #   value
	  send_command_to_oled(0xD3) # Set display offset
	  send_command_to_oled(0x00) #   value
	  send_command_to_oled(0x40) # Set start line #0
	  send_command_to_oled(0x8D) # Set charge pump
	  send_command_to_oled(0x14) #   value **
	  send_command_to_oled(0x20) # Set memory mode
	  send_command_to_oled(0x00) #   value
	  send_command_to_oled(0xA1) # Set segremap($A0 = reset, $A1 = 127 = SEG0)
	  send_command_to_oled(0xC8) # Set com scan dec ($C0 = reset normal, $C8 = scan from Com[n-1] - Com 0
	  send_command_to_oled(0xDA) # Set com pins
	  send_command_to_oled(0x12) #   value
	  send_command_to_oled(0x81) # Set contrast
	  send_command_to_oled(0x8F) #   value
	  send_command_to_oled(0xD9) # Set precharge
	  send_command_to_oled(0xF1) #   value **
	  send_command_to_oled(0xDB) # Set Vcom select
	  send_command_to_oled(0x40) #   value
	  send_command_to_oled(0xA4) # Resume RAM content display
	  send_command_to_oled(0xA6) # Normal display not inverted
	  send_command_to_oled(0xAF) # Display on
	end
	
	def send_command_to_oled(cmd)
		@oled_cs.set_value(1)
		@oled_dc.set_value(0)
		@oled_cs.set_value(0)
	  send_8bit(cmd)
	  @oled_cs.set_value(1)
	end

	def send_8bit(val)
	  (0..7).each do |i|
	  	@oled_data.set_value((val >> (7-i)) & (0x1))
			@oled_clk.set_value(1)
			@oled_clk.set_value(0)
	  end
	end

	def helper_display(max, buffer)
		# Displays a part of buffer, from 0 index to max index
		# 0 < max < 1024
		send_command_to_oled(0x00)
		send_command_to_oled(0x10)
		send_command_to_oled(0x40)
		# SPI
		@oled_cs.set_value(1)
		@oled_dc.set_value(1)
		@oled_cs.set_value(0)
		duty_clockfile = File.open("/sys/class/gpio/gpio#{@oled_clk.pin_gpio}/value", "w");
		(0..max).each do |i|
			val_buffer = buffer[i]
			(0..7).each do |j|
				@oled_data.set_value((val_buffer >> (7-j)) & (0x1))
				duty_clockfile.truncate(0)
				duty_clockfile << "1"
				duty_clockfile.truncate(0)
				duty_clockfile << "0"
			end
		end
		duty_clockfile.close
		@oled_cs.set_value(1)
	end

	def display
	  # This function displays the full buffer
	  # send_command_to_oled(0xAE) # Display off
	  unless @display_priority
		  return if Time.now.to_i < (@last_display_time + 5) # Refresh after 5 seconds
		end
	  @last_display_time = Time.now.to_i
	  dot = [0xFF, 0xFF, 0xFF, 0xC7, 0xC7, 0xC7, 0xFF, 0xFF]
	  dots = []
 		dots = dots.concat(dot)
 		dots = dots.concat(dot)
 		dots = dots.concat(dot)
 		# puts dots, "--------"
	  helper_display(1023, dots.concat(@oled_buffer.slice(24..1023)))
	  helper_display(23, @oled_buffer.slice(0..23))
	  # send_command_to_oled(0xAF) # Display on
	end

	def clear_screen
		clear_buffer
	  display
	end

	# Scroll functions

	def scroll_left_or_right(left_or_right)
    # scroll left if left_or_right is true
    # scroll right if left_or_right is false
    value_left_or_right = 0x26 # right scroll 0x26
    value_left_or_right = 0x27 if (left_or_right)  # left scroll 0x27
    send_command_to_oled(value_left_or_right)
    send_command_to_oled(0x00)
    send_command_to_oled(0x00)
    send_command_to_oled(0x00)
    send_command_to_oled(0x0F)
    send_command_to_oled(0x01)
    send_command_to_oled(0xFF)
    send_command_to_oled(0x2F)
  end

  def stop_scroll
    send_command_to_oled(0x2E)
  end

  # Draw functions
  #   Draw in buffer so 1-clear buffer if needed 2-display the buffer when ready
  def draw_pixel(x,y)
    # We compute the address of the 8 pixel segment we have to update
    segment = (x-1) + ((y-1)/8)*128
    @oled_buffer[segment] = (@oled_buffer[segment] | (0x1 << ((y-1) % 8)) )
  end

  def draw_horizontal_line(x,y,l)
  	(0..(l-1)).each { |i| draw_pixel(x+i,y) }
  end

  def draw_vertical_line(x,y,h)
    (0..(h-1)).each { |i| draw_pixel(x,y+i) }
  end

	def draw_full_rectangle(x,y,l,h)
		(0..(l-1)).each do |i|
			(0..(h-1)).each { |j| draw_pixel(x+i,y+j) }
		end
  end

  def draw_window
    draw_full_rectangle(1,1,5,5)
    draw_full_rectangle(124,1,5,5)
    draw_full_rectangle(1,60,5,5)
    draw_full_rectangle(124,60,5,5)
    draw_horizontal_line(4,1,122)
    draw_horizontal_line(4,3,122)
    draw_horizontal_line(4,64,122)
    draw_horizontal_line(4,62,122)
    draw_vertical_line(1,4,58)
    draw_vertical_line(3,4,58)
    draw_vertical_line(128,4,58)
    draw_vertical_line(126,4,58)
	end

	# String functions

	def draw_char(c, x, y)
		# c is character
		# x, y are screen coordinates
    val = OLED_CHARACTERS[c]['val']
    vert_offset = OLED_CHARACTERS[c]['vertical_offset']
    (0..5).each do |i|
      value_array = val[i]
      (0..7).each do |j|
        value = ( value_array >> j) & (0x1)
        draw_pixel(x+i,y+j+vert_offset) if (value > 0)
      end
    end
  end

  def draw_string(s, x, y)
    if (s.length == 0)
        return
    else
        draw_char(s[0], x, y)
        draw_string(s.slice(1..(s.length-1)), x+OLED_CHARACTERS[s[0]]["width"]+2, y)
    end
  end

  def helper_string_pixel_length(s)
    return 0 if (s.length === 0)
    return OLED_CHARACTERS[s[0]]["width"] if (s.length === 1)
    return (OLED_CHARACTERS[s[0]]["width"] + 2 + helper_string_pixel_length(s.slice(1..(s.length-1))) )
  end

  def draw_2_strings_in_center(s1, s2)
    x1 = 64 - (helper_string_pixel_length(s1)/2)
    x2 = 64 - (helper_string_pixel_length(s2)/2)
    if (x1 < 5 || x2 < 5)
    	draw_2_strings_in_center("ERROR: STRING", "TOO LONG")
    	return
    end
    clear_buffer
    draw_window
    draw_string(s1, x1, 22)
    draw_string(s2, x2, 34)
    display
  end

  def draw_long_string(s)
  	clear_buffer
  	words_array = s.split(" ")
  	i = 0
  	(0..6).each do |line|
			break unless words_array[i]
  		temp_s = ""
	  	while true
	  		before_s = temp_s.dup
	  		temp_s << words_array[i]
	  		temp_s << " "
	  		if helper_string_pixel_length(temp_s) > 128
	  			temp_s = before_s
	  			break
	  		else
	  			i+=1
	  			break unless words_array[i]
	  		end
	  	end
	  	draw_string(temp_s, 6, 1+line*9)
	  end
  	display
  end

  def draw_long_string_windowed(s)
  	clear_buffer
  	draw_window
  	words_array = s.split(" ")
  	i = 0
  	(0..4).each do |line|
  		break unless words_array[i]
  		temp_s = ""
	  	while true
	  		before_s = temp_s.dup
	  		temp_s << words_array[i]
	  		temp_s << " "
	  		if helper_string_pixel_length(temp_s) > 124
	  			temp_s = before_s
	  			break
	  		else
	  			i+=1
	  			break unless words_array[i]
	  		end
	  	end
	  	draw_string(temp_s, 6, 8+line*10)
	  end
  	display
  end

  # Logger

  def draw_logger
    space = 11;
    draw_string(@logger[0], 1, 1) if  (@logger.length > 0)
    draw_string(@logger[1], 1, 1+space) if  (@logger.length > 1)
    draw_string(@logger[2], 1, 1+space*2) if  (@logger.length > 2)
    draw_string(@logger[3], 1, 1+space*3) if  (@logger.length > 3)
    draw_string(@logger[4], 1, 1+space*4) if  (@logger.length > 4)
    draw_string(@logger[5], 1, 1+space*5) if  (@logger.length > 5)
    display
  end

  def add_to_logger(log)
    ll = helper_string_pixel_length(log)
    log = "LOG TOO LONG" if (ll>128)
    @logger.concat([log])
    @logger.delete_at(0) if (@logger.length > 6)
    clear_buffer
		draw_logger
	end

	# Progress bar
	def init_progress_bar(s1, s2)
    @progress_bar_first_line = s1
		@progress_bar_second_line = s2
		update_progress_bar(0)
	end

	def update_progress_bar(p)
		# p is the percentage of completion
		#   it is an integer 0 <= p <= 100
    clear_buffer
		x1 = 64 - (helper_string_pixel_length(@progress_bar_first_line)/2)
    x2 = 64 - (helper_string_pixel_length(@progress_bar_second_line)/2)
    if (x1 < 5 || x2 < 5)
    	draw_2_strings_in_center("ERROR: STRING", "TOO LONG")
    	return
    end
    draw_window
    draw_string(@progress_bar_first_line, x1, 38)
    draw_string(@progress_bar_second_line, x2, 48)
		# Draw the box
		draw_horizontal_line(14,8,102)
		draw_horizontal_line(14,15,102)
		draw_vertical_line(14,8,8)
		draw_vertical_line(115,8,8)
		# Draw progression
		draw_full_rectangle(15,9,p,6)
		# Draw percentage
		s = p.to_s+" %"
		x = 64 - (helper_string_pixel_length(s)/2)
		draw_string(s, x, 22)
		display
		@display_priority = true
	end

  # Buffer functions
  def clear_buffer
  	(0..1023).each do |block|
    	@oled_buffer[block] = 0x00
    end
  end

	def change_buffer(buffer)
		@oled_buffer = buffer_precomputed(buffer)
	end

	# Some precomputed buffers (images to be displayed on the OLED screen)
	def buffer_precomputed(buffer)
		case buffer
		when 'nfs'
		  return [
			0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xFE, 0xFE, 0xDE, 0xFE, 0x2E, 0xBE, 0x9E, 0x3E, 0xBE, 0x9E,
			0x3E, 0xBE, 0xAE, 0x3E, 0x9E, 0xBE, 0xB6, 0xFE, 0x1E, 0x1E, 0x3E, 0x3E, 0x1E, 0x3E, 0x1E, 0x3E,
			0x3E, 0x1E, 0x1E, 0x3E, 0x3E, 0x1E, 0x1E, 0xBE, 0xBE, 0x9E, 0xBE, 0x9E, 0x9E, 0x3E, 0xBE, 0x9E,
			0x9E, 0x3E, 0xBE, 0x1E, 0xEE, 0xFE, 0xDE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
			0x00, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00,
			0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0xFF, 0xFF, 0xF7, 0xFF, 0x00, 0xEC, 0x2D, 0x93, 0x74, 0x4D,
			0x9B, 0x30, 0xE7, 0x2C, 0x4B, 0xD8, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0xC4, 0x59, 0x9A, 0xA6, 0x31, 0x5D, 0xC4,
			0x3B, 0x22, 0xDD, 0x00, 0xFF, 0xFF, 0xBB, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0x03, 0x07, 0x0E, 0x3C, 0x78, 0xFF, 0xFF, 0xFF, 0x00, 0x80, 0xE0, 0xFC,
			0x7F, 0x3F, 0x31, 0x37, 0x3F, 0xFE, 0xF0, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x7F, 0xF8, 0xF8, 0x7F, 0x0F, 0x03, 0x00, 0x00,
			0x00, 0xFF, 0xFF, 0xCE, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0xFF, 0xFF, 0x7D, 0xFF, 0x00, 0xB6, 0xCB, 0x69, 0x36, 0x8D,
			0xF1, 0x0E, 0x79, 0xC3, 0x1E, 0x71, 0xCD, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x6B, 0x48, 0x96, 0xB5, 0x99, 0x63, 0x4E, 0xB8,
			0xA3, 0x4B, 0xDC, 0x04, 0xFB, 0xFF, 0x77, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
			0x80, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x80,
			0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
			0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xFF, 0xFF, 0xDF, 0xFF, 0x00, 0x6D, 0xB2, 0x96, 0x65, 0x6D,
			0x98, 0xCB, 0x33, 0xB4, 0xCD, 0x53, 0x5C, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xB3, 0x8C, 0x65, 0xDA, 0x92, 0x35, 0x66, 0x4A,
			0xD9, 0x14, 0xF7, 0x00, 0x7E, 0xFF, 0xEF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xFF, 0xFF, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x08, 0x3C, 0xFF, 0xEF,
			0xC7, 0x80, 0x00, 0xFB, 0xFF, 0xFF, 0xCC, 0xCC, 0xCC, 0x40, 0x00, 0x00, 0xFF, 0xFF, 0xC3, 0x07,
			0x0E, 0x3C, 0x78, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x3F, 0x7F, 0xFB, 0xE1, 0xC0, 0xC0, 0xE0, 0xE1,
			0x00, 0x00, 0xFF, 0xFF, 0xEF, 0x0C, 0x0C, 0x0C, 0xEF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xFF, 0xFF, 0xEF, 0xFF, 0x00, 0x7B, 0x84, 0x76, 0xCB, 0x19,
			0xF4, 0x86, 0x3B, 0xE4, 0x16, 0xD9, 0x6D, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x12, 0x66, 0xB4, 0x8D, 0x69, 0xD3, 0x16,
			0xEC, 0x23, 0xD9, 0x04, 0xF7, 0xFF, 0xFB, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
			0xC0, 0x80, 0x80, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0xC0, 0xC0, 0xC0,
			0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x40, 0x00, 0x00, 0xC0,
			0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xC9, 0xFF, 0xFF, 0x6F, 0xFF, 0x00, 0x5B, 0x59, 0x66, 0x0C, 0x73,
			0x4C, 0x39, 0x67, 0x44, 0x3A, 0x8B, 0x6C, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xCC, 0x33, 0x29, 0xCC, 0x56, 0x12, 0x39, 0x66,
			0x46, 0x19, 0x76, 0x00, 0xDF, 0xFF, 0xFD, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC7, 0xCF, 0xCF, 0xCC, 0xDC, 0xF9, 0x78, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x18, 0x18,
			0x1F, 0x1F, 0x07, 0x00, 0x00, 0xFF, 0xFF, 0xDC, 0xCC, 0xCC, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0xDD,
			0xCC, 0xDC, 0xCC, 0x00, 0x00, 0x3F, 0x7F, 0xF3, 0xC1, 0xC1, 0xC1, 0xE1, 0x00, 0x00, 0x00, 0xFF,
			0xFF, 0x0C, 0x0C, 0x0C, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
			0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
			0x0F, 0x0F, 0x1F, 0x3F, 0x3E, 0x7C, 0xF8, 0xFB, 0xF4, 0xE5, 0xCB, 0xD0, 0xFF, 0xFF, 0x6F, 0xFF,
			0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0D, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x07, 0x0D, 0x1F, 0x3F, 0x3F,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			]
		when 'adafruit'
		  return [
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
			0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF,
			0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
			0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8,
			0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80,
			0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01,
			0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF,
			0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00,
			0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF,
			0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF,
			0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F,
			0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
			0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03,
			0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01,
			0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00,
			0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03,
			0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F,
			0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF,
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F,
			0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00,
			0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E,
			0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC,
			0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06,
			0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8,
			0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00,
			0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C,
			0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F,
			0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
			0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07,
			0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			]
		end
	end

	# I created some characters to be displayed
	OLED_CHARACTERS = {
	  " " => {"val" => [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "!" => {"val" => [ 0x00, 0x47, 0xEF, 0x47, 0x00, 0x00 ], "width" => 6, "vertical_offset" => 0},
	  "#" => {"val" => [ 0x24, 0xFF, 0x24, 0x24, 0xFF, 0x24 ], "width" => 6, "vertical_offset" => 0},
	  "%" => {"val" => [ 0xC3, 0x63, 0x38, 0x1C, 0xC6, 0xC3 ], "width" => 6, "vertical_offset" => 0},
	  "'" => {"val" => [ 0x0C, 0x07, 0x00, 0x00, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "." => {"val" => [ 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "0" => {"val" => [ 0x3C, 0xC7, 0x89, 0x91, 0xE3, 0x3C ], "width" => 6, "vertical_offset" => 0},
	  "1" => {"val" => [ 0x8C, 0x86, 0xFF, 0x80, 0x80, 0x00 ], "width" => 5, "vertical_offset" => 0},
	  "2" => {"val" => [ 0xE1, 0x91, 0x91, 0x91, 0x91, 0x8E ], "width" => 6, "vertical_offset" => 0},
	  "3" => {"val" => [ 0x81, 0x91, 0x91, 0x91, 0x91, 0x6E ], "width" => 6, "vertical_offset" => 0},
	  "4" => {"val" => [ 0x30, 0x28, 0x24, 0x22, 0xFF, 0x20 ], "width" => 6, "vertical_offset" => 0},
	  "5" => {"val" => [ 0x9F, 0x91, 0x91, 0x91, 0x91, 0x61 ], "width" => 6, "vertical_offset" => 0},
	  "6" => {"val" => [ 0x7C, 0x8A, 0x89, 0x89, 0x89, 0x71 ], "width" => 6, "vertical_offset" => 0},
	  "7" => {"val" => [ 0xC1, 0x61, 0x31, 0x19, 0x0D, 0x07 ], "width" => 6, "vertical_offset" => 0},
	  "8" => {"val" => [ 0x76, 0x89, 0x89, 0x89, 0x89, 0x76 ], "width" => 6, "vertical_offset" => 0},
	  "9" => {"val" => [ 0x8E, 0x91, 0x91, 0x91, 0x51, 0x7E ], "width" => 6, "vertical_offset" => 0},
	  ":" => {"val" => [ 0x00, 0x66, 0x66, 0x00, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "A" => {"val" => [ 0xFC, 0x13, 0x11, 0x11, 0x13, 0xFC ], "width" => 6, "vertical_offset" => 0},
	  "B" => {"val" => [ 0xFF, 0x91, 0x91, 0x91, 0x91, 0x6E ], "width" => 6, "vertical_offset" => 0},
	  "C" => {"val" => [ 0x3C, 0xC3, 0x81, 0x81, 0xC3, 0x42 ], "width" => 6, "vertical_offset" => 0},
	  "D" => {"val" => [ 0xFF, 0x81, 0x81, 0x81, 0xC3, 0x3C ], "width" => 6, "vertical_offset" => 0},
	  "E" => {"val" => [ 0x7E, 0x91, 0x91, 0x91, 0x81, 0x81 ], "width" => 6, "vertical_offset" => 0},
	  "F" => {"val" => [ 0xFE, 0x11, 0x11, 0x11, 0x01, 0x01 ], "width" => 6, "vertical_offset" => 0},
	  "G" => {"val" => [ 0x3C, 0xC3, 0x81, 0x91, 0x71, 0x11 ], "width" => 6, "vertical_offset" => 0},
	  "H" => {"val" => [ 0xFF, 0x10, 0x10, 0x10, 0x10, 0xFF ], "width" => 6, "vertical_offset" => 0},
	  "I" => {"val" => [ 0x81, 0x81, 0xFF, 0x81, 0x81, 0x00 ], "width" => 5, "vertical_offset" => 0},
	  "J" => {"val" => [ 0x81, 0x81, 0x81, 0x7F, 0x01, 0x01 ], "width" => 6, "vertical_offset" => 0},
	  "K" => {"val" => [ 0xFF, 0x18, 0x24, 0x42, 0x81, 0x00 ], "width" => 5, "vertical_offset" => 0},
	  "L" => {"val" => [ 0x7F, 0x80, 0x80, 0x80, 0x80, 0x80 ], "width" => 6, "vertical_offset" => 0},
	  "M" => {"val" => [ 0xFF, 0x0C, 0x30, 0x30, 0x0C, 0xFF ], "width" => 6, "vertical_offset" => 0},
	  "N" => {"val" => [ 0xFF, 0x07, 0x1C, 0x38, 0xE0, 0xFF ], "width" => 6, "vertical_offset" => 0},
	  "O" => {"val" => [ 0x3C, 0xC3, 0x81, 0x81, 0xC3, 0x3C ], "width" => 6, "vertical_offset" => 0},
	  "P" => {"val" => [ 0xFF, 0x11, 0x11, 0x11, 0x11, 0x0E ], "width" => 6, "vertical_offset" => 0},
	  "Q" => {"val" => [ 0x3C, 0xC3, 0x81, 0x21, 0x43, 0x9C ], "width" => 6, "vertical_offset" => 0},
	  "R" => {"val" => [ 0xFF, 0x11, 0x11, 0x31, 0x51, 0x8E ], "width" => 6, "vertical_offset" => 0},
	  "S" => {"val" => [ 0x8E, 0x91, 0x91, 0x91, 0x91, 0x61 ], "width" => 6, "vertical_offset" => 0},
	  "T" => {"val" => [ 0x01, 0x01, 0xFF, 0x01, 0x01, 0x00 ], "width" => 5, "vertical_offset" => 0},
	  "U" => {"val" => [ 0x3F, 0xC0, 0x80, 0x80, 0xC0, 0x3F ], "width" => 6, "vertical_offset" => 0},
	  "V" => {"val" => [ 0x03, 0x3C, 0xC0, 0xC0, 0x3C, 0x03 ], "width" => 6, "vertical_offset" => 0},
	  "W" => {"val" => [ 0x0F, 0xF0, 0x1C, 0x1C, 0xF0, 0x0F ], "width" => 6, "vertical_offset" => 0},
	  "X" => {"val" => [ 0xC3, 0x24, 0x18, 0x18, 0x24, 0xC3 ], "width" => 6, "vertical_offset" => 0},
	  "Y" => {"val" => [ 0xC3, 0x24, 0x18, 0x08, 0x04, 0x03 ], "width" => 6, "vertical_offset" => 0},
	  "Z" => {"val" => [ 0x81, 0xE1, 0x99, 0x99, 0x87, 0x81 ], "width" => 6, "vertical_offset" => 0},
	  "a" => {"val" => [ 0x64, 0x94, 0x94, 0xF8, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "b" => {"val" => [ 0xFE, 0x90, 0x90, 0x60, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "c" => {"val" => [ 0x78, 0x84, 0x84, 0x84, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "d" => {"val" => [ 0x60, 0x90, 0x90, 0xFE, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "e" => {"val" => [ 0x78, 0x94, 0x94, 0x98, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "f" => {"val" => [ 0xFC, 0x12, 0x12, 0x02, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "g" => {"val" => [ 0x8E, 0x91, 0x91, 0x7E, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 3},
	  "h" => {"val" => [ 0xFE, 0x10, 0x10, 0xE0, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "i" => {"val" => [ 0x76, 0x80, 0x80, 0x00, 0x00, 0x00 ], "width" => 3, "vertical_offset" => 0},
	  "j" => {"val" => [ 0x80, 0x80, 0x7B, 0x00, 0x00, 0x00 ], "width" => 3, "vertical_offset" => 3},
	  "k" => {"val" => [ 0xFE, 0x18, 0x36, 0xE3, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "l" => {"val" => [ 0x7C, 0x80, 0x80, 0x80, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "m" => {"val" => [ 0xF8, 0x04, 0x38, 0x04, 0xF8, 0x00 ], "width" => 5, "vertical_offset" => 0},
	  "n" => {"val" => [ 0xF8, 0x04, 0x04, 0xF8, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "o" => {"val" => [ 0x78, 0x84, 0x84, 0x78, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "p" => {"val" => [ 0xFF, 0x11, 0x11, 0x0E, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 3},
	  "q" => {"val" => [ 0x0E, 0x11, 0x11, 0xFF, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 3},
	  "r" => {"val" => [ 0xF8, 0x04, 0x04, 0x08, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "s" => {"val" => [ 0x88, 0x94, 0x94, 0x64, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "t" => {"val" => [ 0x7E, 0x88, 0x88, 0x88, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "u" => {"val" => [ 0xF8, 0x80, 0x80, 0xF8, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 0},
	  "v" => {"val" => [ 0x0C, 0x30, 0xC0, 0x30, 0x0C, 0x00 ], "width" => 5, "vertical_offset" => 0},
	  "w" => {"val" => [ 0x7C, 0x80, 0x70, 0x80, 0x7C, 0x00 ], "width" => 5, "vertical_offset" => 0},
	  "x" => {"val" => [ 0x88, 0x50, 0x20, 0x50, 0x88, 0x00 ], "width" => 5, "vertical_offset" => 0},
	  "y" => {"val" => [ 0x9E, 0x90, 0x90, 0x7E, 0x00, 0x00 ], "width" => 4, "vertical_offset" => 3},
	  "z" => {"val" => [ 0x88, 0xC8, 0xA8, 0x98, 0x88, 0x00 ], "width" => 5, "vertical_offset" => 0}
	}

end

#################################################
####### ACTIONS
#################################################

def update_time
	value = %x[ntpdate pool.ntp.org 2>&1].inspect
	if value =~ /\A.*error.*/i
	else
		# screen.add_to_logger("Time updated")
	end
end

def get_time
	t = Time.now
	t = t.getlocal("+02:00")
	hours = t.hour
	minutes = t.min
	sec = t.sec
	time_string = ""
	time_string << "0" if (hours < 10)
	time_string << hours.to_s
	time_string << ":"
	time_string << "0" if (minutes < 10)
	time_string << minutes.to_s
	time_string << ":"
	time_string << "0" if (sec < 10)
	time_string << sec.to_s
	time_string
end


def local_ip
	require 'socket'
  orig, Socket.do_not_reverse_lookup = Socket.do_not_reverse_lookup, true  # turn off reverse DNS resolution temporarily
  UDPSocket.open do |s|
    s.connect '64.233.187.99', 1
    s.addr.last
  end
	ensure
  Socket.do_not_reverse_lookup = orig
end

def check_website_availability_with_stats(screen)
	time_string = get_time
	log_string = "ERROR LOG"
	begin
		# Get the string response, in my case it's just a number in a string
		response = `curl http://www.writetheURLhere`
		if response == ""
			screen.add_to_logger("ERROR NETWORK")
			screen.add_to_logger("  at "+time_string)
			log_string = "#{get_time} ERROR_NETWORK\n"
		else
			screen.draw_2_strings_in_center("OK at "+time_string, response.to_s+" in last hour")
			log_string = "#{get_time} OK #{response}\n"
		end
	rescue
		screen.add_to_logger("ERROR CURL")
		screen.add_to_logger("  at "+time_string)
		log_string = "#{get_time} ERROR_CURL\n"
	end
	File.open("./#{Time.now.strftime('%Y-%m-%d')}-log-NFS.txt", 'a') { |file| file.write log_string }
end

sleep(45) # Time for BBB to boot (because I launch the program during BBB start
# Create the OLED screen object
oled_data = GPIO_BeagleBone.new('P8_9', 'out')
oled_clk  = GPIO_BeagleBone.new('P8_11', 'out')
oled_dc   = GPIO_BeagleBone.new('P8_13', 'out')
oled_rst  = GPIO_BeagleBone.new('P8_15', 'out')
oled_cs   = GPIO_BeagleBone.new('P8_17', 'out')
oled_screen = OLED_128x64_Adafruit.new(oled_data, oled_clk, oled_dc, oled_cs, oled_rst)

# Adafruit splash screen
# oled_screen.change_buffer('adafruit')
# oled_screen.display
# oled_screen.scroll_left_or_right(true)
# sleep(1)
# oled_screen.stop_scroll

# Start splash screen
oled_screen.change_buffer('nfs')
oled_screen.display
oled_screen.scroll_left_or_right(false)
sleep(5) # Useless but nice to see the logo displayed
oled_screen.stop_scroll
# Display progress bar
oled_screen.init_progress_bar("Initialize","Start")
# Updating time
oled_screen.progress_bar_second_line = "Update time"
oled_screen.update_progress_bar(10)
sleep(0.3)
update_time
# Display time
time_string = get_time
oled_screen.progress_bar_second_line = "Time #{get_time}"
oled_screen.update_progress_bar(50)
sleep(0.5)
# Display IP address
begin
	if local_ip
		oled_screen.progress_bar_second_line = "IP #{local_ip}"
	else
		oled_screen.progress_bar_second_line = "IP ERROR"
	end
rescue
	oled_screen.progress_bar_second_line = "IP ERROR"
end
oled_screen.update_progress_bar(80)
sleep(0.5)
# Everything is ready
oled_screen.progress_bar_second_line = "DONE"
oled_screen.update_progress_bar(100)
sleep(0.1)
# Loop to check the website
while true
		check_website_availability_with_stats(oled_screen)
		sleep(30)
end

